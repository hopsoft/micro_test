#!/usr/bin/env ruby
require "optparse"

lib_path = File.expand_path(File.join(File.dirname(__FILE__), "..", "lib"))
require File.join(lib_path, "micro_test")
include MicroTest::Color

# setup the formatters list ---------------------------------------------------
formatters_path = File.join(lib_path, "micro_test", "formatters")
formatter_names = Dir[File.join(formatters_path, "*.rb")].reduce([]) do |memo, file|
  if (file =~ /(base_formatter\.rb|_async\.rb)$/).nil?
    name = file[file.rindex("/") + 1..-4]
    name = "*#{name}" if name == "mt"
    memo << name
  end
  memo
end

# setup the options -----------------------------------------------------------
options = {}
parser = OptionParser.new do |opts|
  opts.banner = "MicroTest Usage: mt [options] /path/to/test/dir_or_file"

  desc = "Runs tests asynchronously."
  opts.on("-a", "--async", desc) { |value| options[:async] = value }

  desc = "Runs the MicroTest test suite and some additional demo tests."
  opts.on("--demo", desc) { |value| options[:demo] = value }

  desc = "The formatter to use. [#{formatter_names.join(", ")}]"
  opts.on("-f", "--formatter [FORMATTER]", desc) do |value|
    options[:formatter] = value
  end

  desc = "Stops the test run after the first failure. "
  opts.on("--fail-fast", desc) { |value| options[:fail_fast] = value }

  desc = "Starts a PRY session whenever a test fails. "
  opts.on("--pry", desc) { |value| options[:pry] = value }

  opts.on("-v", "--version", "Show version.") do
    puts "MicroTest #{MicroTest::VERSION}"
    exit 0
  end

  opts.on_tail("-h", "--help", "Show this message.") do
    puts opts
    exit 0
  end

end
parser.parse!

# apply rules to the options --------------------------------------------------
if RUBY_ENGINE == "jruby"
  if options[:pry]
    options[:pry] = nil
    puts red("Unfortunately the pry option is not available on jruby")
    puts red("due to a dependency on pry-stack_explorer & binding_of_caller.")
    puts "However, the pry workflow is awesome. Switch to #{green "mri 1.9"} to try it."
  end
end
if RUBY_ENGINE == "rbx"
  if options[:pry]
    options[:pry] = nil
    puts red("Unfortunately the pry option is not available on rubinius at this time")
    puts red("due to weird behavior related to pry & pry-stack_explorer.")
    puts "However, the pry workflow is awesome. Switch to #{green "mri 1.9"} to try it."
  end
end
if options[:async] && options[:pry]
  options[:pry] = nil
  puts red("Disabling pry while runing in async mode to avoid interleaved pry session chaos.")
end
ENV["MT_DEMO"] = "true" if options[:demo]

# setup the test path ---------------------------------------------------------
path = ARGV.last unless ARGV.last =~ /^-/
path = File.expand_path(File.join(File.dirname(__FILE__), "..", "test")) if options[:demo]
path ||= "test"
path = File.join(Dir.pwd, path) unless path =~ /^\//
unless File.exist?(path)
  puts "#{path} not found."
  puts "Please check the path and try again."
  exit 1
end
if path =~ /\.rb$/
  require path
else
  Dir[File.join(path, "**", "*.rb")].each { |path| require path }
end

# setup the formatter ---------------------------------------------------------
formatter_name = options[:formatter] || "mt"
path = File.join(formatters_path, formatter_name + ".rb")
if options[:async]
  async_path = path.gsub(/\.rb$/, "_async.rb")
  path = async_path if File.exist?(async_path)
end
unless File.exist?(path)
  puts "Formatter not found at #{path}"
  puts "Please check the formatter name and try again."
  exit 1
end
begin
  require path
  formatter = MicroTest.const_get("Formatter").new
rescue Exception => ex
  puts "Failed to load the formatter defined at #{path}"
  puts ex.message
  exit 1
end

# setup the test runner -------------------------------------------------------
runner = MicroTest::Runner.new(formatter, options)

# setup pry -------------------------------------------------------------------
if options[:pry]

  begin
    require "pry"
    require "pry-stack_explorer"
  rescue Exception => e
    puts red(e.message)
    puts e.backtrace.join("\n")
    puts red("This can be caused when pry-stack_explorer isn't specified in the Gemfile.")
    puts red("It might also indicate that pry-stack_explorer & pry are out of sync.")
    puts red("If your Gemfile is in good shape, try uninstalling the most recent version of pry.")
    exit 1
  end

  Pry.config.hooks.add_hook :before_session, :print_instructions do |_, _, _pry_|
    _pry_.commands.create_command "line", "View the assert line that failed." do
      def process
        stack = caller.dup
        unwanted_stack = stack.select do |line|
          line =~ /pry-nav|pry-debugger/
        end
        if unwanted_stack.empty?
          _pry_.run_command "up"
        else
          _pry_.run_command "up #{unwanted_stack.size + 1}"
        end
      end
    end

    puts "".ljust(80, "-")
    puts " Pry session started"
    puts "".ljust(80, "-")
    puts " - Type #{yellow "line"} to see the line that failed."
    puts "   If #{yellow "line"} doesn't work for you, use #{yellow "up"} & #{yellow "down"} to navigate the stack."
    puts
    puts " - Type #{yellow "whereami"} if running with pry-rescue and an unhandled exception"
    puts "   started the pry session."
    puts
    puts " - Type #{yellow "exit"} or #{blue "<CTL-D>"} to continue"
    puts "".ljust(80, "-")
    puts
  end
end

exit runner.run

#!/usr/bin/env ruby

require "optparse"

# setup the options -----------------------------------------------------------
options = {}
parser = OptionParser.new do |opts|
  opts.banner = "PryTest Usage: pry-test [options] /path/to/test/dir_or_file"

  desc = "Runs tests asynchronously."
  opts.on("-a", "--async", desc) { |value| options[:async] = value }

  desc = "Runs the PryTest test suite and some additional demo tests."
  opts.on("--demo", desc) { |value| options[:demo] = value }

  desc = "The formatter to use."
  opts.on("-f", "--formatter [FORMATTER]", desc) do |value|
    options[:formatter] = value
  end

  desc = "Stops the test run after the first failure. "
  opts.on("--fail-fast", desc) { |value| options[:fail_fast] = value }

  desc = "Disabled pry during the test run. "
  opts.on("--disable-pry", desc) { |value| options[:disable_pry] = value }

  opts.on("-v", "--version", "Show version.") do
    puts "PryTest #{PryTest::VERSION}"
    exit 0
  end

  opts.on_tail("-h", "--help", "Show this message.") do
    puts opts
    exit 0
  end
end
parser.parse!

ENV["PRY_TEST_DEMO"] = "true" if options[:demo]

def require_tests(options)
  path = ARGV.last unless ARGV.last =~ /^-/
  path = File.expand_path("../../test", __FILE__) if options[:demo]
  path ||= "test"
  path = File.join(Dir.pwd, path) unless path =~ /^\//
  unless File.exist?(path)
    puts "#{path} not found."
    puts "Please check the path and try again."
    exit 1
  end
  if path =~ /\.rb$/
    require path
  else
    Dir[File.join(path, "**/*.rb")].each { |path| require path }
  end
end

def runner(options)
  formatter = PryTest.formatters.find { |f| f.short_name == options[:formatter] }
  formatter ||= begin
    if options[:async]
      PryTest.formatters.find { |f| f.short_name == "default_async" }
    else
      PryTest.formatters.find { |f| f.short_name == "default" }
    end
  end
  PryTest::Runner.new(formatter.new, options)
end

# setup pry -------------------------------------------------------------------
options[:disable_pry] ||= options[:async] || RUBY_ENGINE == "jruby" || RUBY_ENGINE == "rbx"

if options[:disable_pry]
  if ENV["PRY_TEST_COVERAGE"]
    require "simplecov"
    require "coveralls"
    SimpleCov.command_name "pry-test"
    SimpleCov.formatter = Coveralls::SimpleCov::Formatter
    SimpleCov.start do
      add_filter "test/*.rb"
    end
  end

  require_relative "../lib/pry-test"
  require_tests options
  include PryTest::Color
  puts magenta("Disabling pry when running with: [#{RUBY_ENGINE}] #{options.inspect}")
  exit runner(options).run
else
  require_relative "../lib/pry-test"
  require_tests options
  include PryTest::Color

  begin
    require "pry"
    require "pry-stack_explorer"
    require "pry-rescue"
  rescue Exception => e
    puts red(e.message)
    puts e.backtrace.join("\n")
    puts red("This can be caused when pry-stack_explorer isn't specified in the Gemfile.")
    puts red("It might also indicate that pry-stack_explorer & pry are out of sync.")
    puts red("Try different cominations of GEM versions for pry & pry-stack_explorer.")
    exit 1
  end

  Pry.config.hooks.add_hook :before_session, :print_instructions do |_, _, _pry_|
    puts
    puts magenta(" Pry session started")
    puts magenta("".ljust(80, "-"))
    puts " #{magenta "  Failures:"} Type #{green "up"} to see the line that failed"
    puts " #{magenta "Exceptions:"} Type #{green "whereami"} to get your bearings"
    puts
    puts " Type #{green "exit"} or #{green "<CTL-D>"} to continue"
    puts magenta("".ljust(80, "-"))
    puts
  end

  exit Pry.rescue { runner(options).run }
end
